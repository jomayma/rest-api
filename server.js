const express = require('express') 
const logger = require('morgan')
const errorhandler = require('errorhandler')
const bodyParser = require('body-parser')

var mongoose = require('mongoose')
mongoose.Promise = global.Promise
mongoose.connect('mongodb://localhost:27017/edx-course-db')

const accountSchema = mongoose.Schema({
    name: {
      type: String
      ,validate: {
        validator: function(v) {
          return v.length > 1;
        },
        message: '{VALUE} is too short as account name!'
      }
      , required: [true, 'Account name is required']
    },
    balance: {
      type: Number
      , required: [true, 'Balance value is required']
    }
})

let Account = mongoose.model('Account', accountSchema)

let app = express()
app.use(bodyParser.json())
app.use(logger('dev'))
app.use(errorhandler())

//Create
app.post('/accounts', (req, resp) => {
    let accountData = req.body
    let newAccount = new Account({name: accountData.name, balance: accountData.balance})
    newAccount.save((err, result) =>{
        if (err) {
            console.error("Error verified saving account :: ",err)
            return resp.send({error: 'Please enter valid account data.'})
        } else {
            console.log('Saved Account: ', result)
            resp.status(201).send(result)
        }
    })
})

//Read
app.get('/accounts',(req, resp) => {
    Account.find((err, result) => {
        if (err) {
            console.error("Error verified retrieving accounts :: ",err)
            resp.send({error: 'Error verified reading accounts info.'})
        } else {
            resp.status(200).send(result)
        }
    })
})

//Update
//updates account data at specific id
//NOTE: replace 'id' in "http://localhost:3000/accounts/id" with the id generated by the previous POST command
app.put('/accounts/:id', (req,resp) => {
    let accountData = req.body
    Account.findById(req.params.id, (err, result) => {
        if (err || !result) {
            console.error("Error verified updating account id='",req.params.id,"' :: ",err)
            resp.send({error: 'Error verified updating account by id.'})
        } else {
            result.name = (accountData.name)? accountData.name : result.name
            result.balance = (accountData.balance)? accountData.balance : result.balance
            result.save((err, result) =>{
                if (err) {
                    console.error("Error verified updating account :: ",err)
                    resp.send({error: 'Please enter valid account data.'})
                } else {
                    console.log('Updated Account: ', result)
                    resp.status(200).send(result)
                }
            })
        }
    })
})

//Delete
//deletes account data at specific id
//NOTE: replace 'id' in "http://localhost:3000/accounts/id" with the id generated by the previous POST command
app.delete('/accounts/:id', (req,resp) => {
    let accountData = req.body
    Account.findById(req.params.id, (err, result) => {
        if (err || !result) {
            console.error("Error verified deleting account id='",req.params.id,"' :: ",err)
            resp.send({error: 'Error verified deleting account by id.'})
        } else {
            result.remove((err, result) =>{
                if (err) {
                    console.error("Error verified deleting account :: ",err)
                    resp.send({error: 'Please enter valid account data.'})
                } else {
                    console.log('Deleted Account: ', result)
                    resp.status(204).send()
                }
            })
        }
    })
})

app.listen(3000)