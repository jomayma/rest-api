const express = require('express') 
const logger = require('morgan')
const errorhandler = require('errorhandler')
const bodyParser = require('body-parser')

var mongoose = require('mongoose')
mongoose.Promise = global.Promise
mongoose.connect('mongodb://localhost:27017/edx-course-db')

const accountSchema = mongoose.Schema({
    name: {
      type: String
      ,validate: {
        validator: function(v) {
          return v.length > 1;
        },
        message: '{VALUE} is too short as account name!'
      }
      , required: [true, 'Account name is required']
    },
    balance: {
      type: Number
      , required: [true, 'Balance value is required']
    }
})

let Account = mongoose.model('Account', accountSchema)

let app = express()
app.use(bodyParser.json())
app.use(logger('dev'))

//Create
app.post('/accounts', (req, resp, next) => {
    let accountData = req.body
    let newAccount = new Account({name: accountData.name, balance: accountData.balance})
    newAccount.save((err, result) =>{
        if (err) {
            console.error("Error verified saving account :: ",err)
            return next(`Error verified saving account :: ${err}`)
        } else {
            console.log('Saved Account: ', result)
            resp.status(201).send(result)
        }
    })
})

//Read
app.get('/accounts',(req, resp, next) => {
    Account.find((err, result) => {
        if (err) {
            console.error("Error verified retrieving accounts :: ",err)
            return next(`Error verified retrieving accounts :: ${err}`)
        } else {
            resp.status(200).send(result)
        }
    })
})

app.param('id', (req, resp, next) => {
    Account.findById(req.params.id, (err, account) => {
        if (err || !account) {
            console.error("Error getting account id='",req.params.id,"' :: ",err)
            return next(`Error getting account id='${req.params.id}' :: ${err}`)
        } else {
            req.account = account
            next()
        }
    })
})

//Read - Simple retrieve by id
app.get('/accounts/:id', (req, resp, next) => {
    console.log('Retrieved Account: ', req.account)
    resp.status(200).send(req.account)
})

//Update
//updates account data at specific id
//NOTE: replace 'id' in "http://localhost:3000/accounts/id" with the id generated by the previous POST command
app.put('/accounts/:id', (req, resp, next) => {
    let accountData = req.body
    req.account.name = (accountData.name)? accountData.name : req.account.name
    req.account.balance = (accountData.balance)? accountData.balance : req.account.balance
    req.account.save((err, result) =>{
        if (err) {
            console.error("Error verified updating account :: ",err)
            return next(`Error verified updating account :: ${err}`)
        } else {
            console.log('Updated Account: ', result)
            resp.status(200).send(result)
        }
    })
})

//Delete
//deletes account data at specific id
//NOTE: replace 'id' in "http://localhost:3000/accounts/id" with the id generated by the previous POST command
app.delete('/accounts/:id', (req, resp, next) => {
    req.account.remove((err, result) =>{
        if (err) {
            console.error("Error verified deleting account :: ",err)
            return next(`Please enter valid account data. id='${req.params.id}' :: ${err}`)
        } else {
            console.log('Deleted Account: ', result)
            resp.status(204).send()
        }
    })
})

app.use(errorhandler())
app.listen(3000)